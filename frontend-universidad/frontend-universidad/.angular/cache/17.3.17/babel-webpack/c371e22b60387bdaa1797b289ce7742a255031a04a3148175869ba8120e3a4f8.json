{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\nlet LoginComponent = class LoginComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.showRegister = false;\n    this.credentials = {\n      usuario: \"\",\n      password: \"\"\n    };\n    this.registerData = {\n      usuario: \"\",\n      correo: \"\",\n      password: \"\",\n      verificarPassword: \"\",\n      nombre: \"\",\n      apellido: \"\",\n      role: \"USUARIO\"\n    };\n    this.loading = false;\n    this.error = \"\";\n    this.success = \"\";\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate([\"/dashboard\"]);\n    }\n  }\n  onSubmit() {\n    if (!this.credentials.usuario || !this.credentials.password) {\n      this.error = \"Por favor complete todos los campos\";\n      return;\n    }\n    this.loading = true;\n    this.error = \"\";\n    this.success = \"\";\n    console.log(\"Intentando login con:\", this.credentials.usuario);\n    this.authService.login(this.credentials).subscribe({\n      next: response => {\n        console.log(\"Login exitoso:\", response);\n        this.loading = false;\n        this.success = \"Login exitoso, redirigiendo...\";\n        setTimeout(() => {\n          this.router.navigate([\"/dashboard\"]);\n        }, 1000);\n      },\n      error: error => {\n        console.error(\"Error de login:\", error);\n        this.loading = false;\n        if (error.status === 0) {\n          this.error = \"No se puede conectar al servidor. Verifique que el backend esté ejecutándose en puerto 3002.\";\n        } else if (error.status === 401 || error.status === 400) {\n          this.error = \"Usuario o contraseña incorrectos\";\n        } else {\n          this.error = \"Error del servidor. Intente nuevamente.\";\n        }\n      }\n    });\n  }\n  onRegister() {\n    if (!this.registerData.usuario || !this.registerData.correo || !this.registerData.password || !this.registerData.nombre || !this.registerData.apellido) {\n      this.error = \"Por favor complete todos los campos\";\n      return;\n    }\n    if (this.registerData.password !== this.registerData.verificarPassword) {\n      this.error = \"Las contraseñas no coinciden\";\n      return;\n    }\n    this.loading = true;\n    this.error = \"\";\n    this.success = \"\";\n    console.log(\"Intentando registro con:\", this.registerData.usuario);\n    this.authService.register(this.registerData).subscribe({\n      next: response => {\n        console.log(\"Registro exitoso:\", response);\n        this.loading = false;\n        this.success = \"Registro exitoso. Ahora puede iniciar sesión.\";\n        this.showRegister = false;\n        this.registerData = {\n          usuario: \"\",\n          correo: \"\",\n          password: \"\",\n          verificarPassword: \"\",\n          nombre: \"\",\n          apellido: \"\",\n          role: \"USUARIO\"\n        };\n      },\n      error: error => {\n        console.error(\"Error de registro:\", error);\n        this.loading = false;\n        if (error.status === 0) {\n          this.error = \"No se puede conectar al servidor.\";\n        } else if (error.error && error.error.message) {\n          this.error = error.error.message;\n        } else {\n          this.error = \"Error al registrar usuario. Intente nuevamente.\";\n        }\n      }\n    });\n  }\n  toggleMode() {\n    this.showRegister = !this.showRegister;\n    this.error = \"\";\n    this.success = \"\";\n    this.credentials = {\n      usuario: \"\",\n      password: \"\"\n    };\n    this.registerData = {\n      usuario: \"\",\n      correo: \"\",\n      password: \"\",\n      verificarPassword: \"\",\n      nombre: \"\",\n      apellido: \"\",\n      role: \"USUARIO\"\n    };\n  }\n  testConnection() {\n    console.log(\"Probando conexión al backend...\");\n    fetch(\"http://localhost:3002/api/auth/test\").then(response => {\n      if (response.ok) {\n        this.success = \"Conexión al backend exitosa\";\n        console.log(\"Backend conectado correctamente\");\n      } else {\n        this.error = \"Backend responde pero hay un error\";\n      }\n    }).catch(error => {\n      this.error = \"No se puede conectar al backend en puerto 3002\";\n      console.error(\"Error de conexión:\", error);\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: \"app-login\",\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.css\"]\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","CommonModule","FormsModule","LoginComponent","constructor","authService","router","showRegister","credentials","usuario","password","registerData","correo","verificarPassword","nombre","apellido","role","loading","error","success","isAuthenticated","navigate","onSubmit","console","log","login","subscribe","next","response","setTimeout","status","onRegister","register","message","toggleMode","testConnection","fetch","then","ok","catch","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["C:\\Users\\SantiagoGamer\\Downloads\\frontend-universidad\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { Component } from \"@angular/core\"\nimport { CommonModule } from \"@angular/common\"\nimport { FormsModule } from \"@angular/forms\"\nimport type { Router } from \"@angular/router\"\nimport type { AuthService } from \"../../services/auth.service\"\nimport type { LoginRequest, RegisterRequest } from \"../../models/user.model\"\n\n@Component({\n  selector: \"app-login\",\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.css\"],\n})\nexport class LoginComponent {\n  showRegister = false\n\n  credentials: LoginRequest = {\n    usuario: \"\",\n    password: \"\",\n  }\n\n  registerData: RegisterRequest = {\n    usuario: \"\",\n    correo: \"\",\n    password: \"\",\n    verificarPassword: \"\",\n    nombre: \"\",\n    apellido: \"\",\n    role: \"USUARIO\",\n  }\n\n  loading = false\n  error = \"\"\n  success = \"\"\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n  ) {\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate([\"/dashboard\"])\n    }\n  }\n\n  onSubmit(): void {\n    if (!this.credentials.usuario || !this.credentials.password) {\n      this.error = \"Por favor complete todos los campos\"\n      return\n    }\n\n    this.loading = true\n    this.error = \"\"\n    this.success = \"\"\n\n    console.log(\"Intentando login con:\", this.credentials.usuario)\n\n    this.authService.login(this.credentials).subscribe({\n      next: (response) => {\n        console.log(\"Login exitoso:\", response)\n        this.loading = false\n        this.success = \"Login exitoso, redirigiendo...\"\n        setTimeout(() => {\n          this.router.navigate([\"/dashboard\"])\n        }, 1000)\n      },\n      error: (error) => {\n        console.error(\"Error de login:\", error)\n        this.loading = false\n        if (error.status === 0) {\n          this.error = \"No se puede conectar al servidor. Verifique que el backend esté ejecutándose en puerto 3002.\"\n        } else if (error.status === 401 || error.status === 400) {\n          this.error = \"Usuario o contraseña incorrectos\"\n        } else {\n          this.error = \"Error del servidor. Intente nuevamente.\"\n        }\n      },\n    })\n  }\n\n  onRegister(): void {\n    if (\n      !this.registerData.usuario ||\n      !this.registerData.correo ||\n      !this.registerData.password ||\n      !this.registerData.nombre ||\n      !this.registerData.apellido\n    ) {\n      this.error = \"Por favor complete todos los campos\"\n      return\n    }\n\n    if (this.registerData.password !== this.registerData.verificarPassword) {\n      this.error = \"Las contraseñas no coinciden\"\n      return\n    }\n\n    this.loading = true\n    this.error = \"\"\n    this.success = \"\"\n\n    console.log(\"Intentando registro con:\", this.registerData.usuario)\n\n    this.authService.register(this.registerData).subscribe({\n      next: (response) => {\n        console.log(\"Registro exitoso:\", response)\n        this.loading = false\n        this.success = \"Registro exitoso. Ahora puede iniciar sesión.\"\n        this.showRegister = false\n        this.registerData = {\n          usuario: \"\",\n          correo: \"\",\n          password: \"\",\n          verificarPassword: \"\",\n          nombre: \"\",\n          apellido: \"\",\n          role: \"USUARIO\",\n        }\n      },\n      error: (error) => {\n        console.error(\"Error de registro:\", error)\n        this.loading = false\n        if (error.status === 0) {\n          this.error = \"No se puede conectar al servidor.\"\n        } else if (error.error && error.error.message) {\n          this.error = error.error.message\n        } else {\n          this.error = \"Error al registrar usuario. Intente nuevamente.\"\n        }\n      },\n    })\n  }\n\n  toggleMode(): void {\n    this.showRegister = !this.showRegister\n    this.error = \"\"\n    this.success = \"\"\n    this.credentials = { usuario: \"\", password: \"\" }\n    this.registerData = {\n      usuario: \"\",\n      correo: \"\",\n      password: \"\",\n      verificarPassword: \"\",\n      nombre: \"\",\n      apellido: \"\",\n      role: \"USUARIO\",\n    }\n  }\n\n  testConnection(): void {\n    console.log(\"Probando conexión al backend...\")\n    fetch(\"http://localhost:3002/api/auth/test\")\n      .then((response) => {\n        if (response.ok) {\n          this.success = \"Conexión al backend exitosa\"\n          console.log(\"Backend conectado correctamente\")\n        } else {\n          this.error = \"Backend responde pero hay un error\"\n        }\n      })\n      .catch((error) => {\n        this.error = \"No se puede conectar al backend en puerto 3002\"\n        console.error(\"Error de conexión:\", error)\n      })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}